#!/bin/bash

set -o nounset

HNAME=$(hostnamectl hostname)
echo "Status: Hostname $HNAME"

XPATH=$(realpath "$0")
echo "Status: Path $XPATH"

DPATH=$(dirname "$XPATH")
echo "Status: Dir $DPATH"

onroot () {
  if [ "$(echo "$1" | cut -c -6)" = "/home/" ]; then
    return 10
  else
    return 11
  fi
}

dosudo () {
  onroot "$2"

  if [ $? = 11 ]; then
    $SHELL -c "sudo $1 $2"
  else
    $SHELL -c "$1 $2"
  fi
}

cmerge () {
  if [[ -n "${3:+x}" ]]; then
    echo "Error: cmerge() requires 2 parameters, got 3: $1, $2, $3"
    exit 1
  fi

  SRC="$1"                              # source
  HSRC="$SRC.$HNAME"                    # host-specific source
  DST="$2"                              # destination

  if [ -f "$SRC" ]; then
    # common
    # echo "Status: Found $PSRC -> $DST"
    SRC="$SRC"
  elif [ -f "$HSRC" ]; then
    # host-specific
    # echo "Status: Found $PHSRC -> $DST"
    SRC="$HSRC"
  else
    echo "Might-Skip:"
    echo "  $DPATH/$SRC does not exist"
    echo "  $DPATH/$HSRC does not exist"

    if [ -f "$DST" ]; then
      echo "Not-Skip: $DST -> {$HSRC}"
      cp -i "$DST" "$DPATH/$HSRC"
    else
      echo "Skip: File $DST does not exist either"
    fi

    return
  fi

  if [ -e "$DST" ]; then
    if [ -f "$DST" ]; then
      if diff "$DPATH/$SRC" "$DST" 1>/dev/null 2>&1 ; then
        echo "Skip: {$SRC} === $DST"
      else
        echo "Merge: {$SRC} != $DST"
        dosudo "nvim -f -d $DPATH/$SRC" "$DST"
      fi
    else
      echo "Error: $DST exists but is not a file"
      exit 1
    fi
  else
    DSTDIRNAME=$(dirname "$DST")
    echo "Create: $DSTDIRNAME"
    dosudo "mkdir -p" "$DSTDIRNAME"
    echo "Copy: {$SRC} -> $DST"
    dosudo "cp -i $DPATH/$SRC" "$DST"
  fi
}

echo "Gnome: Applying generic settings..."
dconf load / < gnome/gnome.dconf
if [ -f "gnome/gnome.dconf.$HNAME" ]; then
  echo "Applying Gnome settings for $HNAME..."
  dconf load / < "gnome/gnome.dconf.$HNAME"
fi

# Hide some applications from desktop menus.
hide_applications="avahi-discover bssh bvnc cmake-gui cppcheck-gui echomixer \
                   emacsclient envy24control ettercap gvim hdajackretask     \
                   hdspconf hdspmixer htop hwmixvolume ipython lstopo nvtop  \
                   qv4l2 qvidcap vim weechat xdot xdvi xsane gtk-lshw"

for application in $hide_applications; do
  destination="$HOME/.local/share/applications/$application.desktop"
  if [ ! -f "$destination" ]; then
    echo "Hide: Hiding application $application"
    printf '[Desktop Entry]\nHidden=true\n' > "$destination"
  else
    echo "Skip: Application $application already hidden"
  fi
done

# Give some apps a papirus icon.
declare -A papirus_applications
papirus_applications["eu.qtrac.diffpdf"]="mimetypes/application-pdf"
papirus_applications["org.kde.kcachegrind"]="apps/org.kde.kcachegrind"
papirus_applications["org.kde.kgraphviewer"]="apps/kgraphviewer"
papirus_applications["org.kde.massif-visualizer"]="apps/org.kde.massif-visualizer"

for application in "${!papirus_applications[@]}"; do
  icon=${papirus_applications[$application]}

  source1="/usr/share/applications/$application.desktop"
  source2="$HOME/.local/share/flatpak/exports/share/applications/$application.desktop"
  dest="$HOME/.local/share/applications/$application.desktop"
  if [ ! -f "$dest" ]; then
    if [ -f "$source1" ]; then
      cp "$source1" "$dest"
      printf "Icon=/usr/share/icons/Papirus/64x64/%s.svg" "$icon" >> "$dest"
    elif [ -f "$source2" ]; then
      cp "$source2" "$dest"
      printf "Icon=/usr/share/icons/Papirus/64x64/%s.svg" "$icon" >> "$dest"
    else
      echo "Skip: No sources were found for application $application"
    fi
  else
    echo "Skip: Destination found for application $application, not going to overwrite"
  fi
done

# Figure out the default Firefox profile
FIREFOX_PROFILE=$(
  awk '/\[/{prefix=$0; next} $1{print prefix $0}' ~/.mozilla/firefox/profiles.ini |
    grep -i "\\[Profile0\\]Path=" | cut -d = -f 2
               )

printf 'Default Firefox Profile = %s\n' "$FIREFOX_PROFILE"

cmerge firefox/user.js                 ~/.mozilla/firefox/"$FIREFOX_PROFILE"/user.js

cmerge gnome/bookmarks                 ~/.config/gtk-3.0/bookmarks

cmerge gnome/nautilus-date/NautilusDate.py ~/.local/share/nautilus-python/extensions/NautilusDate.py
cmerge gnome/nautilus-date/pyproject.toml  ~/.local/share/nautilus-python/extensions/pyproject.toml

cmerge shell/bashrc                    ~/.bashrc
cmerge shell/bashrc.user               ~/.bashrc.user
cmerge shell/bash_profile              ~/.bash_profile
cmerge shell/profile                   ~/.profile
cmerge shell/inputrc                   ~/.config/readline/inputrc
cmerge shell/foot.ini                  ~/.config/foot/foot.ini
cmerge shell/starship.rs               ~/.config/starship.toml

cmerge nvim/init.vim                   ~/.config/nvim/init.vim

cmerge gdb/gdbearlyinit                ~/.config/gdb/gdbearlyinit
cmerge gdb/gdbinit                     ~/.config/gdb/gdbinit

cmerge dict/hunspell_en_US             ~/.hunspell_en_US
cmerge dict/aspell.en.pws              ~/.aspell.en.pws
cmerge dict/en_US.dic                  ~/.config/enchant/en_US.dic
cmerge dict/en.dic                     ~/.config/enchant/en.dic

cmerge emacs/early-init.el             ~/.config/emacs/early-init.el
cmerge emacs/init.el                   ~/.config/emacs/init.el

cmerge htoprc                          ~/.config/htop/htoprc
cmerge yt-dlp.conf                     ~/.config/yt-dlp/config

cmerge mpv/input.conf                  ~/.config/mpv/input.conf
cmerge mpv/mpv.conf                    ~/.config/mpv/mpv.conf

cmerge ssh/config                      ~/.ssh/config
cmerge git/config                      ~/.config/git/config
cmerge git/config-ox                   ~/.config/git/config-ox

cmerge fonts/fonts.conf                ~/.config/fontconfig/fonts.conf

cmerge mimeapps.list                   ~/.config/mimeapps.list

HALLOY=~/.var/app/org.squidowl.halloy/config/halloy
cmerge irc/config.toml                 $HALLOY/config.toml
cmerge irc/theme.toml                  $HALLOY/themes/Latte.toml

cmerge loader/loader.conf              /boot/loader/loader.conf
cmerge loader/arch.conf                /boot/loader/entries/arch.conf

cmerge polkit-mount.rules              /etc/polkit-1/rules.d/99-mount.rules

cmerge archlinux/makepkg.conf          /etc/makepkg.conf
cmerge archlinux/makepkg-rust.conf     /etc/makepkg.conf.d/rust.conf
cmerge archlinux/mkinitcpio.conf       /etc/mkinitcpio.conf
cmerge archlinux/pacman.conf           /etc/pacman.conf
cmerge archlinux/paru.conf             /etc/paru.conf
cmerge archlinux/mirrorlist            /etc/pacman.d/mirrorlist

cmerge net/hostname                    /etc/hostname
cmerge net/hosts                       /etc/hosts

cmerge sysctl/locale.conf              /etc/locale.conf
cmerge sysctl/sysctl.conf              /etc/sysctl.d/sysctl.conf
cmerge sysctl/limits.conf              /etc/security/limits.conf

cmerge modules/modprobe.conf           /etc/modprobe.d/modprobe.conf
cmerge modules/nvidia.conf             /etc/modprobe.d/nvidia.conf

cmerge docker/daemon.json              /etc/docker/daemon.json
cmerge docker/config.json              ~/.config/docker/config.json

SYSD=/etc/systemd

cmerge systemd/coredump.conf           $SYSD/coredump.conf
cmerge systemd/system.conf             $SYSD/system.conf
cmerge systemd/journald.conf           $SYSD/journald.conf
cmerge systemd/resolved.conf           $SYSD/resolved.conf
cmerge systemd/logind.conf             $SYSD/logind.conf
cmerge systemd/boot-override.conf      $SYSD/system/boot.mount.d/override.conf
cmerge systemd/paccache-override.conf  $SYSD/system/paccache.service.d/override.conf

cmerge vpn/ox.service                  $SYSD/system/ox.service
cmerge vpn/ox-suspend.service          $SYSD/system/ox-suspend.service
cmerge vpn/ox-resume.service           $SYSD/system/ox-resume.service
cmerge vpn/dovecot-net.positive        /etc/dnssec-trust-anchors.d/dovecot-net.positive
cmerge vpn/open-xchange.negative       /etc/dnssec-trust-anchors.d/open-xchange.negative

if [ -f /etc/os-release ]; then
  if grep -i "archlinux" /etc/os-release 1>/dev/null 2>&1 ; then
    pkgs_tmp_file=$(mktemp)
    pacman -Qtteq | sort > "$pkgs_tmp_file"
    cmerge "pkgs/pacman.list" "$pkgs_tmp_file"
    pkgs_install=$(comm --check-order -2 -3 "pkgs/pacman.list.$HNAME" "$pkgs_tmp_file" | tr '\n' ' ')
    pkgs_remove=$(comm --check-order -1 -3 "pkgs/pacman.list.$HNAME" "$pkgs_tmp_file" | tr '\n' ' ')
    rm "$pkgs_tmp_file"

    if [ "$pkgs_remove" != "" ]; then
      echo "Remove packages:"
      $SHELL -c "sudo pacman -Rcsn $pkgs_remove"
    fi

    install_happened=0

    if [ "$pkgs_install" != "" ]; then
      echo "Install packages:"
      $SHELL -c "sudo pacman -Sy --needed $pkgs_install"
      install_happened=1
    fi

    echo "Update System"
    if [ $install_happened == 0 ]; then
      paru -Syu
    else
      paru -Su
    fi
  fi
fi

flatpak_tmp_file=$(mktemp)
flatpak --user list --app --columns=application > "$flatpak_tmp_file"
cmerge "pkgs/flatpak.list" "$flatpak_tmp_file"
flatpak_install=$(comm -2 -3 "pkgs/flatpak.list" "$flatpak_tmp_file" | tr '\n' ' ')
flatpak_remove=$(comm -1 -3 "pkgs/flatpak.list" "$flatpak_tmp_file" | tr '\n' ' ')
rm "$flatpak_tmp_file"

if [ "$flatpak_remove" != "" ]; then
  echo "Remove Flatpaks:"
  $SHELL -c "flatpak --user remove --delete-data --app $flatpak_remove"
fi

if [ "$flatpak_install" != "" ]; then
  echo "Install Flatpaks:"
  $SHELL -c "flatpak --user install $flatpak_install"
fi

flatpak --user update
flatpak --user uninstall --unused --delete-data

pkgs_cargo_tmp_file=$(mktemp)
cargo install --list | grep -E ':$' | awk '{ print $1 }' > "$pkgs_cargo_tmp_file"
cmerge "pkgs/cargo.list" "$pkgs_cargo_tmp_file"
pkgs_cargo_install=$(comm --check-order -2 -3 "pkgs/cargo.list" "$pkgs_cargo_tmp_file" | tr '\n' ' ')
pkgs_cargo_remove=$(comm --check-order -1 -3 "pkgs/cargo.list" "$pkgs_cargo_tmp_file" | tr '\n' ' ')
rm "$pkgs_cargo_tmp_file"

if [ "$pkgs_cargo_remove" != "" ]; then
  echo "Remove Cargo packages:"
  $SHELL -c "cargo uninstall $pkgs_cargo_remove"
fi

if [ "$pkgs_cargo_install" != "" ]; then
  echo "Install Cargo packages:"
  $SHELL -c "cargo binstall $pkgs_cargo_install"
fi

have_unneeded_packages=$(pacman -Qdt | wc -l)
if [ "$have_unneeded_packages" != 0 ]; then
  echo ""
  echo "Unneeded Packages:"
  echo "------------------"
  pacman -Qdt
fi

have_foreign_packages=$(pacman -Qm | wc -l)
if [ "$have_foreign_packages" != 0 ]; then
  echo ""
  echo "Foreign Packages:"
  echo "-----------------"
  pacman -Qme
fi
