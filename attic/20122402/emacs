;; Add user and system-wide elisp library directories
(add-to-list 'load-path "~/.emacs.d/")
(add-to-list 'load-path "/usr/share/emacs/site-lisp/")
;; (add-to-list 'load-path "/usr/share/emacs/site-lisp/haskell-mode")

;; Set the default font
(add-to-list 'default-frame-alist 
	     '(font . "Liberation Mono:size=12:antialias=true"))

(require 'battery)
(display-battery-mode)

;; Load modes for filetypes
(setq auto-mode-alist (append '(("/*.\.upc$"  . c-mode))
			      '(("/*.\.cilk$" . c-mode))
			      '(("/*.\.py$"   . python-mode))
			      '(("/PKGBUILD$" . pkgbuild-mode))
			      '(("\\.gp$"     . gnuplot-mode))
			      '(("\.lua$"     . lua-mode))
			      '(("/*.\.hs$"   . haskell-mode))
			      '(("/*.\.js$"   . js-mode))
			      '(("/*.\.json$" . js-mode))
			      '(("\\.org$"    . org-mode))
			      auto-mode-alist))

(which-function-mode 1)

;;--------------------------------------------------------------------
;; Lines enabling gnuplot-mode

;; move the files gnuplot.el to someplace in your lisp load-path or
;; use a line like
;;  (setq load-path (append (list "/path/to/gnuplot") load-path))

;; these lines enable the use of gnuplot mode
  (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
  (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)

;; this line automatically causes all files with the .gp extension to
;; be loaded into gnuplot mode
  (setq auto-mode-alist (append '(("\\.gp$" . gnuplot-mode)) auto-mode-alist))

;; This line binds the function-9 key so that it opens a buffer into
;; gnuplot mode 
  (global-set-key [(f9)] 'gnuplot-make-buffer)

;; end of line for gnuplot-mode
;;--------------------------------------------------------------------

;; Haskell
(load "/usr/share/emacs/site-lisp/haskell-mode/haskell-mode")
;; (autoload 'haskell-mode "haskell-mode.el" "Haskell mode." t)
(add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
(add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
;; (add-hook 'haskell-mode-hook 'turn-on-haskell-indent)
;; (add-hook 'haskell-mode-hook 'turn-on-haskell-simple-indent)

;; LaTeX
(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)

(add-hook 'latex-mode-hook 'visual-line-mode)
(add-hook 'latex-mode-hook 'flyspell-mode)
(add-hook 'latex-mode-hook 'latex-math-mode)
(add-hook 'latex-mode-hook 'turn-on-reftex)
(add-hook 'latex-math-mode 'turn-on-auto-fill)

(add-hook 'latex-mode-hook
	  (lambda () (local-set-key (kbd "C-c p") 'backward-paragraph)))
(add-hook 'latex-mode-hook
	  (lambda () (local-set-key (kbd "C-c n") 'forward-paragraph)))

(setq-default tex-master nil)

(setq tex-auto-save t)
(setq tex-parse-self t)
(setq reftex-plug-into-auctex t)
(setq tex-pdf-mode t)

;; JavaScript
;; (load-file "/usr/share/emacs/site-lisp/js2.elc")

;; Verilog
(setq verilog-auto-newline nil)

;; C
(add-hook 'c-mode-common-hook
	  (lambda () (local-set-key (kbd "C-x /")
				    'ff-find-other-file)))

;; GNUplot
;; (autoload 'gnuplot-mode "gnuplot" "gnuplot major mode" t)
;; (autoload 'gnuplot-make-buffer "gnuplot" "open a buffer in gnuplot mode" t)

;; Python
(autoload 'python-mode "python-mode.el" "Python mode." t)
;; (setq py-shell-name "ipython")
(setq-default indent-tabs-mode nil)

;; Archlinux PKGBUILD
(autoload 'pkgbuild-mode "pkgbuild-mode.el" "PKGBUILD mode." t)

;; Auto-fill
;; (add-hook 'org-mode-hook 'turn-on-auto-fill)  ;; in Org mode
(add-hook 'text-mode-hook 'turn-on-auto-fill) ;; In Text mode

;; Dired
;; allow dired to be able to delete or copy a whole dir.
;; “always” means no asking. “top” means ask once.
;; Any other symbol means ask each and every time for a dir and subdir.
(setq dired-recursive-copies (quote always))
(setq dired-recursive-deletes (quote top))

;; Bookmarks
;; (set-register
;;  ?p '(file . ""))

;; Easy window movement with M-{left,right,up,down}
(windmove-default-keybindings 'meta)
(setq windmove-wrap-around t)

;; UI and other tweaks
(savehist-mode 1)                  ;; Enable saving minibuffer history
(setq tab-always-indent 'complete) ;; Smart tabs
(delete-selection-mode t)          ;; Delete selection
(setq skeleton-pair t)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(blink-cursor-mode (- (*) (*) (*))) ;; Turn off cursor blink
(fset 'yes-or-no-p 'y-or-n-p)	    ;; Use 'y' and 'n'
(column-number-mode 1)              ;; Column in modeline
(setq linum-format " %4d ")         ;; Line number format
(global-linum-mode 1)               ;; Show line numbers

(setq
 auto-save-default nil
 backup-inhibited t
 inhibit-startup-message t
 echo-keystrokes 0.1
 require-final-newline t
 ;; redisplay-dont-pause t
 scroll-margin 1
 scroll-step 1
 scroll-conservatively 5
 scroll-preserve-screen-position 1
 gc-cons-percentage 0.3
 print-gensym t
 print-circle t)

(defun run-pdf-viewer ()
  (interactive)
  (shell-command "evince main.pdf &"))

(defun compile-with-make-clean ()
  (interactive)
  (shell-command "xterm -e make veryclean"))

(defun compile-with-make ()
  (interactive)
  (shell-command "xterm -e make"))

(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (next-line)
      (transpose-lines 1))
    (next-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (next-line)
      (transpose-lines -1))
    (move-to-column col)))

;; (defun duplicate-line ()
;;   (interactive)
;;   (beginning-of-line)
;;   (let ((b (point)))
;;     (end-of-line)
;;     (copy-region-as-kill b (point)))
;;   (beginning-of-line 2)
;;   (open-line 1)
;;   (yank)
;;   (back-to-indentation))

;; Key bindings
(global-set-key (kbd "C-x p") 'run-pdf-viewer)
(global-set-key (kbd "C-x c") 'compile-with-make)
(global-set-key (kbd "C-x x") 'compile-with-make-clean)

(global-set-key (kbd "M-<down>") 'move-line-down)
(global-set-key (kbd "M-<up>")   'move-line-up)

;; Duplicate line with C-c d
;; (global-set-key (kbd "C-c d") "\C-a\C- \C-n\M-w\C-y")
;; (global-set-key (kbd "C-c d") 'duplicate-line)
(global-set-key (kbd "C-c d") (kbd "C-a C-@ C-e M-w RET C-y"))

;; Add newlines before and after current line
;; Useful for LaTeX \item lines
(global-set-key (kbd "C-;") (kbd "C-a RET C-e C-o"))

;; (defun arrow-right-xpm (color1 color2)
;;   "Return an XPM right arrow string representing."
;;   (format "/* XPM */
;; static char * arrow_right[] = {
;; \"12 18 2 1\",
;; \".	c %s\",
;; \" 	c %s\",
;; \".           \",
;; \"..          \",
;; \"...         \",
;; \"....        \",
;; \".....       \",
;; \"......      \",
;; \".......     \",
;; \"........    \",
;; \".........   \",
;; \".........   \",
;; \"........    \",
;; \".......     \",
;; \"......      \",
;; \".....       \",
;; \"....        \",
;; \"...         \",
;; \"..          \",
;; \".           \"};"  color1 color2))

;; (defun arrow-left-xpm (color1 color2)
;;   "Return an XPM right arrow string representing."
;;   (format "/* XPM */
;; static char * arrow_right[] = {
;; \"12 18 2 1\",
;; \".	c %s\",
;; \" 	c %s\",
;; \"           .\",
;; \"          ..\",
;; \"         ...\",
;; \"        ....\",
;; \"       .....\",
;; \"      ......\",
;; \"     .......\",
;; \"    ........\",
;; \"   .........\",
;; \"   .........\",
;; \"    ........\",
;; \"     .......\",
;; \"      ......\",
;; \"       .....\",
;; \"        ....\",
;; \"         ...\",
;; \"          ..\",
;; \"           .\"};"  color2 color1))


;; (defconst color1 "#999")
;; (defconst color2 "#555")

;; (defvar arrow-right-1 (create-image (arrow-right-xpm color1 color2) 'xpm t :ascent 'center))
;; (defvar arrow-right-2 (create-image (arrow-right-xpm color2 "None") 'xpm t :ascent 'center))
;; (defvar arrow-left-1  (create-image (arrow-left-xpm color2 color1) 'xpm t :ascent 'center))
;; (defvar arrow-left-2  (create-image (arrow-left-xpm "None" color2) 'xpm t :ascent 'center))

;; (setq-default mode-line-format
;;  (list  '(:eval (concat (propertize " %b " 'face 'mode-line-color-1)
;;                         (propertize " " 'display arrow-right-1)))
;;         '(:eval (concat (propertize " %m " 'face 'mode-line-color-2)
;;                         (propertize " " 'display arrow-right-2)))

;;         ;; Justify right by filling with spaces to right fringe - 16
;;         ;; (16 should be computed rahter than hardcoded)
;;         '(:eval (propertize " " 'display '((space :align-to (- right-fringe 17)))))

;;         '(:eval (concat (propertize " " 'display arrow-left-2)
;;                         (propertize " %p " 'face 'mode-line-color-2)))
;;         '(:eval (concat (propertize " " 'display arrow-left-1)
;;                         (propertize "%4l:%2c  " 'face 'mode-line-color-1)))
;; )) 

;; (make-face 'mode-line-color-1)
;; (set-face-attribute 'mode-line-color-1 nil
;;                     :foreground "#fff"
;;                     :background color1)

;; (make-face 'mode-line-color-2)
;; (set-face-attribute 'mode-line-color-2 nil
;;                     :foreground "#fff"
;;                     :background color2)

;; (set-face-attribute 'mode-line nil
;;                     :foreground "#fff"
;;                     :background "#000"
;;                     :box nil)
;; (set-face-attribute 'mode-line-inactive nil
;;                     :foreground "#fff"
;;                     :background "#000")
