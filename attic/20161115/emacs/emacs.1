;; System packages: global htmlize-git minted pymacs python-autopep8
;;   python-epc python-isort python-pysmell python-jedi
;;   python-pyflakes flake8 python-pygments python-pylint
;;   python-pysmell python-rope ditaa ditaa-eps haskell-quickcheck ghc
;;   ghc-mod c2hs haskell-cpphs stylish-haskell hindent hlint
;;   hdevtools cabal-install haddock alex happy haskell-hunit hasktags
;;   haskell-transformers-base haskell-transformers-compat hayoo
;;   hoogle luacheck

(defvar my-packages
  '(use-package  org
                flycheck-irony irony irony-eldoc company company-irony
                company-irony-c-headers company-c-headers jedi py-autopep8
                py-isort py-yapf haskell-mode company-ghc))

(defun prefix-each (prefix l)
  "Prepend PREFIX to each element of L."
  (mapcar (lambda (x) (concat prefix x)) l))

(defun cc-mode-setup (std)
  "Setup C and C++ modes with language standard STD."

  (defvar company-backends)
  (add-to-list 'company-backends 'company-c-headers)

  (flycheck-add-next-checker 'c/c++-gcc '(t . c/c++-cppcheck))
  ;; (flycheck-add-next-checker 'c/c++-cppcheck '(t . c/c++-clang))

  (helm-gtags-mode)
  ;; (projectile-mode)
  ;; (eldoc-mode)
  ;; (ggtags-mode)

)

(defun irony-mode-setup ()
  "Setup for  irony-mode.

   Will   replace  `completion-at-point'   and  `complete-symbol'
   bindings with irony-mode's own functions."
  (defvar irony-mode-map)
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async)
  (defvar company-backends)
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-irony))
  (eval-after-load 'company
    '(add-to-list 'company-backends 'company-irony-c-headers))
  (require 'flycheck-irony)
  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
  (flycheck-add-next-checker 'irony '(t . c/c++-gcc)))

(defun python-mode-setup ()
  "Setup Python mode."

  (defadvice ac-activate-completing-map (before disable-ws-and-fc activate)
    "Disable WS and FC before AC completion."
    (global-whitespace-mode -1)
    (flycheck-mode -1))

  (defadvice ac-deactivate-completing-map (after enable-ws-and-fc activate)
    "Enable WS and FC after AC completion."
    (global-whitespace-mode 1)
    (flycheck-mode 1))

  (run-python "python")
  (py-autopep8-enable-on-save)
  (py-yapf-enable-on-save)
  (add-hook 'before-save-hook 'py-isort-before-save)
  (flycheck-add-next-checker 'python-flake8 '(t . python-pycompile))
  (flycheck-add-next-checker 'python-pycompile '(t . python-pylint))
  (setq-default ac-use-fuzzy t)
  (setq-default ac-max-width 40)
  (setq-default popup-use-optimized-column-computation nil)
  (setq-default jedi:complete-on-dot t)
  (setq-default jedi:setup-keys t);
  (setq-default jedi:tooltip-method nil)
  (jedi:setup))

(defun org-mode-setup ()
  "Setup org for literate programming."
  (require 'ox-latex)
  (require 'ox-html)
  (require 'ox-man)

  (declare-function org-indent-mode "org-indent" (&optional arg))
  (org-indent-mode)
  (auto-fill-mode)
  (flyspell-mode)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((C . t) (scheme . t) (ditaa . t)))

  (local-set-key [f6] 'org-latex-export-to-pdf)

  (defvar org-latex-packages-alist)
  (add-to-list 'org-latex-packages-alist '("newfloat" "minted"))
  (setq-default org-latex-listings 'minted)
  (setq-default org-latex-pdf-process
                `(,(string-join (list "pdflatex -shell-escape"
                                      "-interaction nonstopmode"
                                      "-output-directory %o %f" nil) " ")
                  ,(string-join (list "pdflatex -shell-escape"
                                      "-interaction nonstopmode"
                                      "-output-directory %o %f" nil) " ")
                  ,(string-join (list "pdflatex -shell-escape"
                                      "-interaction nonstopmode"
                                      "-output-directory %o %f" nil) " ")))

  (custom-set-faces
   '(org-document-title
     ((t (:family "Sans Serif" :height 1.2 :weight bold
                  :foreground "black"))))
   '(org-level-1
     ((t (:height 1.1 :weight bold :foreground "#3C3C3C"
                  :background "#F0F0F0" :overline "#A7A7A7")))))
  (custom-set-variables
   '(org-latex-minted-options
     '(("frame" "lines") ("linenos" "true") ("mathescape" "true")
       ("breaklines" "true") ("style" "xcode")))
   '(org-latex-default-packages-alist
     '(("AUTO" "inputenc" t) ("T1" "fontenc" t)  ("" "fixltx2e" nil)
       ("" "graphicx" t)     ("" "grffile" t)    ("" "longtable" nil)
       ("" "wrapfig" nil)    ("" "rotating" nil) ("normalem" "ulem" t)
       ("" "amsmath" t)      ("" "textcomp" t)   ("" "amssymb" t)
       ("" "capt-of" nil)    ("" "hyperref" nil)
       ("margin=0.5in" "geometry" t)))
   '(org-startup-with-latex-preview t)
   '(org-html-html5-fancy t)
   '(org-confirm-babel-evaluate nil)
   '(org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0_9.jar")
   '(org-ditaa-eps-jar-path "/usr/share/java/ditaa-eps/DitaaEps.jar")))

(defun haskell-mode-setup ()
  "Mode setup for Haskell."
  (defvar haskell-mode-map)
  (define-key haskell-mode-map (kbd "<f8>") 'haskell-navigate-imports)
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (interactive-haskell-mode)
  (flyspell-prog-mode)
  (ghc-init)
  (defvar company-backends)
  (add-to-list 'company-backends 'company-ghc)
  (custom-set-variables
   '(haskell-process-log t)
   '(haskell-process-auto-import-loaded-modules t)
   '(haskell-process-suggest-restart t)
   '(haskell-process-suggest-imports t)
   '(haskell-process-suggest-haskell-docs-imports t)
   '(haskell-process-suggest-remove-import t)
   '(haskell-process-suggest-remove-import-lines t)
   '(haskell-process-suggest-hoogle-imports t)
   ;; '(haskell-process-suggest-hayoo-imports t)
   '(haskell-process-use-presentation-mode t)
   '(haskell-stylish-on-save t)
   ;; '(haskell-tags-on-save t)
   '(haskell-doc-show-global-types t)
   '(flycheck-ghc-args '("-W" "-Wall"))))

;; (defun irony-eldoc-setup ()
;;   "Setup for irony-eldoc."
;;   (custom-set-variables
;;    '(eldoc-echo-area-use-multiline-p t)))

(add-hook 'org-mode-hook      #'org-mode-setup)
(add-hook 'python-mode-hook     #'python-mode-setup)
(add-hook 'haskell-mode-hook    #'haskell-mode-setup)
(add-hook 'c-mode-hook   (lambda () (cc-mode-setup "c99")))
(add-hook 'c++-mode-hook (lambda () (cc-mode-setup "c++11")))
(add-hook 'c-mode-hook      #'irony-mode)
(add-hook 'irony-mode-hook  #'irony-mode-setup)
(add-hook 'irony-mode-hook  #'irony-cdb-autosetup-compile-options)
;; (add-hook 'irony-mode-hook  #'irony-eldoc)
;; (add-hook 'irony-eldoc-hook #'irony-eldoc-setup)

;;; Set mode names in modeline
(custom-set-default 'company-lighter-base "CMP")
(custom-set-default 'cwarn-mode-text " CW")
(custom-set-default 'irony-lighter " IY")

(custom-set-variables
 '(company-global-modes
   (quote (not fundamental-mode shell-mode text-mode pascal-mode dired-mode
               python-mode org-mode doc-view-mode)))
 '(company-idle-delay 0.2)
 '(company-minimum-prefix-length 2)
 '(global-company-mode t)
 '(tags-revert-without-query t))
